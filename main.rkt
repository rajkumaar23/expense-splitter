#lang racket
(require dyoo-while-loop)
(define users (make-hash))
(define events (make-hash))
(define user_expenses (make-hash))
(define expenses '())

 

(define (clear_data)
  (set! expenses '())
  (hash-clear! users)
  (hash-clear! events)
  (hash-clear! user_expenses)
  )

 

(define (read_users)
  (display "Enter total number of people : ")
  (newline)
  (define no_ppl(read))
   
  (for ([i no_ppl])
    (display  (string-append "Enter name of person ID : " (~v i)))
    (newline)
    (define username (read))
    (hash-set! users i username)
    )
  users)

 

(define (read_events)
  (display "Enter total number of events : ")
  (newline)
  (define no_event(read))
   
  (for ([i no_event])
    (display  (string-append "Enter name of event : " (~v i)))
    (newline)
    (define event_name (read))
    (hash-set! events i event_name)
    )
  events)

 

(define (read_expenses)
  (display "Let's start reading the expense details")
  (newline)
  (while #t
         (display "Enter user ID : ")
         (newline)
         (define u_id (read))
         (display "Enter event ID : ")
         (newline)
         (define e_id (read))
         (display "Enter amount spent : ")
         (newline)
         (define amount (read))
         (display "Do you want to continue ? ")
         (define ch (read-line))
         (define input (read-line))
         (set! expenses (append expenses (list (list u_id e_id amount))))
         (unless (regexp-match #px"yes" input)
           (break))
         (newline)
         )
  )
(define (calc_expenses)
  (define sum 0)
  (for ([i (length expenses)])
    (set! sum (+ sum (caddr (list-ref expenses i))))
    )
  (display "Total amount of expenses is Rs.")
  (display sum)
  (define no-of-users 0)
  (for ([value (in-hash-values users)])
    (set! no-of-users (+ no-of-users 1))
    )
  (define per-head (/ sum no-of-users))
  (newline)
  (display "Expense per head is Rs.")
  (display per-head)
  (for ([n no-of-users])
    (define ind_sum 0)
    (for ([i (length expenses)])
      (cond
        [
         (equal? n (car (list-ref expenses i)))
         (set! ind_sum (+ ind_sum (caddr (list-ref expenses i))))
         ]))
    (hash-set! user_expenses n (- per-head ind_sum)))
  (newline)
  sum
  )
(define (display_expenses)
  (for ([key (in-hash-keys user_expenses)])
    (display "- ")
    (cond
      [(> (hash-ref user_expenses key) 0)
       (display "'")
       (display (hash-ref users key))
       (display "' owes Rs.")
       (display (hash-ref user_expenses key))
       (display " to the pool")]
        
      [else (display "The pool owes Rs.")
            (display (* -1 (hash-ref user_expenses key)))
            (display " to '")
            (display (hash-ref users key))
            (display "'")
            ]
      )
    (newline)
    )
  )
  
(define (main)
  (read_users)
  (newline)
  (display "************************************************************************")
  (newline)
  (newline)
  (read_events)
  (newline)
  (display "************************************************************************")
  (newline)
  (newline)
  (read_expenses)
  (newline)
  (display "************************************************************************")
  (newline)
  (newline)
  (calc_expenses)
  (newline)
  (display "************************************************************************")
  (newline)
  (newline)
  (display_expenses)
  (newline)
  (display "************************************************************************")
  (newline)
  (clear_data)
  )